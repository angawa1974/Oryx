parameters:
  ascName: OryxMCR
  acrDevName: oryxdevmcr.azurecr.io
  acrProdName: oryxmcr
  acrPmeProdName: oryxprodmcr
  acrPmeProdSrvConnection: Oryx-PME-ACR-Production
  prodImageName: oryxmcr.azurecr.io/public/oryx

steps:

- checkout: self
  clean: true

- script: |
    if [ "$(ReleaseBuildImages)" != "true" ] && [ "$(ReleaseRuntimeImages)" != "true" ]
    then
      echo "Invalid configuration."
      echo "Variable 'ReleaseBuildImages' or 'ReleaseRuntimeImages' needs to be 'true' to run this"
      exit 1
    fi
  displayName: 'Validate release pipeline run'

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrDevName }}

- task: DownloadBuildArtifacts@0
  displayName: 'Download Artifacts for release'
  inputs:
    artifactName: drop

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- template: _setReleaseTag.yml

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for build images'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagBuildImagesForRelease.sh
    args: 
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for runtime images'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagRunTimeImagesForRelease.sh
    args: '${{ parameters.acrProdName }} ${{ parameters.acrPmeProdName }}'
  condition: and(succeeded(), eq(variables['ReleaseRuntimeImages'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for buildpack images'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagBuildpacksImagesForRelease.sh
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for CLI images'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagCliImagesForRelease.sh
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test runtime images for non-pme staging registry'
  inputs:
    scriptPath: ./build/testRunTimeImages.sh
    args: 'skipBuildingImages ${{ parameters.acrProdName }}.azurecr.io/public/oryx $(RELEASE_TAG_NAME) Category=Release'
  condition: and(succeeded(), eq(variables['ReleaseRuntimeImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test runtime images for pme staging registry'
  inputs:
    scriptPath: ./build/testRunTimeImages.sh
    args: skipBuildingImages ${{ parameters.acrPmeProdName }}.azurecr.io/public/oryx $(RELEASE_TAG_NAME) Category=Release
  condition: and(succeeded(), eq(variables['ReleaseRuntimeImages'], 'true'))

- task: Docker@1
  displayName: 'Push build image to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}.azurecr.io
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.acrProdName }}-build-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: true
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: Docker@1
  displayName: 'Push buildpack images to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}.azurecr.io
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.acrProdName }}-buildpack-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: true
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: Docker@1
  displayName: 'Push CLI images to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}.azurecr.io
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.acrProdName }}-cli-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: true
  condition: and(succeeded(), eq(variables['ReleaseBuildImages'], 'true'))

- task: Docker@1
  displayName: 'Push runtime images to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}.azurecr.io
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.acrProdName }}-runtime-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: false
  condition: and(succeeded(), eq(variables['ReleaseRuntimeImages'], 'true'))

- task: Docker@2
  displayName: Login to PME ACR
  inputs: 
    commands: login
    containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Push images to PME staging ACR'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/pushImagesToRegistry.sh
    args: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.acrPmeProdName }}-runtime-images-mcr.txt'

- task: Docker@2
  displayName: Logout from PME ACR
  inputs: 
    commands: logout
    containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}

- task: ShellScript@2
  displayName: 'Clean up Docker containers and images'
  inputs:
    scriptPath: ./vsts/scripts/cleanDocker.sh
  condition: true